/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.keyan.struts.action;

import java.text.DateFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.keyan.hibernate.form.Mtable;
import com.keyan.hibernate.form.MtableDAO;
import com.keyan.struts.form.MeetingForm;

/**
 * MyEclipse Struts Creation date: 03-29-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/meeting" name="meetingForm" input="/form/meeting.jsp"
 *                parameter="method" scope="request" validate="true"
 * @struts.action-forward name="meetingList" path="/meetingList.jsp"
 */
public class MeetingAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws ParseException
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		MeetingForm meetingForm = (MeetingForm) form;// TODO Auto-generated
														// method stub

		String method = (String) request.getParameter("method");
		ActionErrors errors = new ActionErrors();
		ActionForward forward = new ActionForward();
		ServletContext context = this.servlet.getServletContext();
		List mList = new ArrayList();
		String type = request.getParameter("type");
		MtableDAO mtableDAO = new MtableDAO();
		Mtable mtable = new Mtable();
		if (method.equals("query")) {
			mList = mtableDAO.findByType1(new Integer(type));
			request.setAttribute("mList", mList);
			if (type.equals("1")) {
				return mapping.findForward("meetingList");
			} else {
				return mapping.findForward("meetingList1");
			}

		}

		else if (method.equals("insert")) {
			DateFormat time = DateFormat.getDateInstance();
			mtable.setMeetingName(meetingForm.getMeetingName());
			mtable.setAddress(meetingForm.getAddress());
			mtable.setMeetingType(meetingForm.getMeetingType());
			mtable.setStartTime(time.parse(meetingForm.getStartTime()));
			mtable.setEndTime(time.parse(meetingForm.getStartTime()));
			mtable.setType1(new Integer(meetingForm.getType1()));
			mtable.setCourseName(meetingForm.getCourseName());

			mtableDAO.save(mtable);

			mList = mtableDAO.findByType1(new Integer(meetingForm.getType1()));
			request.setAttribute("mList", mList);
			if (meetingForm.getType1().equals("1")) {
				return mapping.findForward("meetingList");
			} else {
				return mapping.findForward("meetingList1");
			}

		}

		else if (method.equals("queryID")) {
			String id = request.getParameter("id");
			mtable = mtableDAO.findById(new Integer(id));

			request.setAttribute("mtable", mtable);

			return mapping.findForward("meetingQuery");
		}

		else if (method.equals("update")) {

			mtableDAO.update(meetingForm);

			mList = mtableDAO.findByType1(new Integer(meetingForm.getType1()));
			request.setAttribute("mList", mList);
			if (meetingForm.getType1().equals("1")) {
				return mapping.findForward("meetingList");
			} else {
				return mapping.findForward("meetingList1");
			}

		}

		else if (method.equals("deleteMeeting")) {
			String id = request.getParameter("id");
			String type1 = request.getParameter("type");
			mtableDAO.delete(new Integer(id));

			mList = mtableDAO.findByType1(new Integer(type1));
			request.setAttribute("mList", mList);
			if (type1.equals("1")) {
				return mapping.findForward("meetingList");
			} else {
				return mapping.findForward("meetingList1");
			}
		}

		else if (method.equals("meetingSearch")) {

			mList = mtableDAO.queryByName(meetingForm.getMeetingName(),
					meetingForm.getStartTime(), meetingForm.getEndTime(),
					meetingForm.getType1());
			request.setAttribute("mList", mList);
			if (meetingForm.getType1().equals("1")) {
				return mapping.findForward("meetingList");
			} else {
				return mapping.findForward("meetingList1");
			}
		}
		return null;
	}
}